import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { formatErrorForHtml, parseSubscriptionMessage } from './telegram.utils';
import { SubscriptionsService } from '../trading-bot/subscriptions/subscriptions.service';
import {
  SUPPORTED_INTERVALS,
  validateAndNormalizeInterval,
} from '../trading-bot/utils/interval.utils';
import { PLAN_CONFIG } from '../config/plan.config';
import { UsersService } from '../users/users.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly channelId: string;
  private readonly mainKeyboard = Markup.keyboard([
    ['üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', 'üìò –ö–æ–º–∞–Ω–¥—ã'],
    ['üìã –ü–æ–¥–ø–∏—Å–∫–∏'],
  ]).resize();

  constructor(
    @InjectBot() private bot: Telegraf,
    private readonly configService: ConfigService,
    private readonly subscriptionsService: SubscriptionsService,
    private readonly usersService: UsersService,
  ) {
    this.channelId = this.configService.get<string>('TELEGRAM_CHANNEL_ID', '');
    if (!this.channelId) {
      throw new Error('TELEGRAM_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
    }
  }

  onModuleInit() {
    this.bot.command('start', async (ctx) => {
      const userId = ctx.from.id.toString();
      await this.usersService.createIfNotExists(userId);
      await this.sendWelcomeMessage(ctx);
    });

    this.bot.command('help', async (ctx) => {
      await this.handleHelpCommand(ctx);
    });

    this.bot.command('subscribe', async (ctx) => {
      await this.handleSubscribeCommand(ctx);
    });

    this.bot.command('buy', async (ctx) => {
      await this.handleBuyCommand(ctx);
    });

    this.bot.hears('status', async (ctx) => {
      await this.handleStatusCommand(ctx);
    });

    this.bot.hears('üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', async (ctx) => {
      await this.handleMyStatus(ctx);
    });

    this.bot.hears('üìò –ö–æ–º–∞–Ω–¥—ã', async (ctx) => {
      await this.handleHelpCommand(ctx);
    });

    this.bot.hears('üìã –ü–æ–¥–ø–∏—Å–∫–∏', async (ctx) => {
      await this.handleSubscriptionsCommand(ctx);
    });

    this.bot.action('show_help', async (ctx) => {
      await this.handleHelpCallback(ctx);
    });

    this.bot.command('subscriptions', async (ctx) => {
      await this.handleSubscriptionsCommand(ctx);
    });

    this.bot.command('unsubscribe', async (ctx) => {
      await this.handleUnsubscribeCommand(ctx);
    });

    // Handle subscription messages
    this.bot.on('text', async (ctx) => {
      await this.handleSubscriptionMessage(ctx);
    });

    this.bot.action('refresh_subscriptions', async (ctx) => {
      await this.handleRefreshSubscriptionsCallback(ctx);
    });

    this.bot.action('clear_all_subscriptions', async (ctx) => {
      await this.handleClearAllCommand(ctx);
    });

    this.bot.action('buy_pro', async (ctx) => {
      await this.handleBuyPlanCallback(ctx, 'pro');
    });

    this.bot.action('buy_premium', async (ctx) => {
      await this.handleBuyPlanCallback(ctx, 'premium');
    });

    this.bot.action('back_to_plans', async (ctx) => {
      await this.handleBuyCommand(ctx);
    });

    this.bot.action(/^pay_(pro|premium)$/, async (ctx) => {
      const plan = ctx.match[1] as 'pro' | 'premium';
      await this.handlePaymentCallback(ctx, plan);
    });

    this.bot.on('pre_checkout_query', async (ctx) => {
      await ctx.answerPreCheckoutQuery(true);
    });

    this.bot.on('successful_payment', async (ctx) => {
      await this.handleSuccessfulPayment(ctx);
    });
  }

  private async handleHelpCommand(ctx: Context): Promise<void> {
    try {
      const helpMessage = this.formatHelpMessage();
      await ctx.reply(helpMessage, {
        parse_mode: 'HTML',
        ...this.mainKeyboard,
      });
    } catch (error) {
      console.error('Error handling help command:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏',
        this.mainKeyboard,
      );
    }
  }

  private async handleHelpCallback(ctx: Context): Promise<void> {
    try {
      const helpMessage = this.formatHelpMessage();

      await ctx.editMessageText(helpMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_welcome' }],
            [{ text: 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'show_help' }],
          ],
        },
      });
    } catch (error) {
      console.error('Error handling help callback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏');
    }
  }

  private formatHelpMessage(): string {
    const supportedIntervals = Object.keys(SUPPORTED_INTERVALS).join(', ');

    return (
      '<b>üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n' +
      '<b>üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã:</b>\n' +
      '‚Ä¢ <code>/subscribe SYMBOL INTERVAL</code> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n' +
      '  <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/subscribe SUIUSDT 15m</code>\n\n' +
      '<b>üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>\n' +
      '‚Ä¢ <code>/subscriptions</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n' +
      '‚Ä¢ <code>/unsubscribe SYMBOL INTERVAL</code> ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n' +
      '  <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/unsubscribe SUIUSDT 15m</code>\n' +
      '‚Ä¢ <code>/clearall</code> ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n' +
      '<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n' +
      '‚Ä¢ –°–∏–º–≤–æ–ª—ã –±–µ—Ä–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ Bybit\n' +
      '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:\n' +
      supportedIntervals
    );
  }

  private async sendWelcomeMessage(ctx: Context): Promise<void> {
    try {
      if (!ctx.from) {
        throw new Error('User information not available');
      }
      const userId = ctx.from.id.toString();
      await this.usersService.createIfNotExists(userId);

      await ctx.reply(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Macd Strategy Bot!\n\n' +
          '–Ø —è–≤–ª—è—é—Å—å —á–∞—Å—Ç—å—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã <a href="https://t.me/snap_trade">Snap Trade</a> \n\n' +
          '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É MACD (+ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –æ–±—ä–µ–º–∞–º + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤).\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
        {
          parse_mode: 'HTML',
          ...this.mainKeyboard,
        },
      );

      // Show detailed status after welcome message
      await this.handleMyStatus(ctx);
    } catch (error) {
      console.error('Error sending welcome message:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        this.mainKeyboard,
      );
    }
  }

  private async handleSubscriptionMessage(ctx: Context): Promise<void> {
    if (!ctx.message || !('text' in ctx.message)) return;

    const userId = ctx.from?.id.toString();
    if (!userId) {
      await ctx.reply(
        '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        this.mainKeyboard,
      );
      return;
    }

    // Skip if message starts with a command
    if (ctx.message.text.startsWith('/')) return;

    try {
      const { symbol, interval } = parseSubscriptionMessage(ctx.message.text);
      const normalizedInterval = validateAndNormalizeInterval(interval);

      await this.subscriptionsService.createOrUpdateSubscription(
        userId,
        symbol,
        normalizedInterval,
      );

      const message = `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol} ${normalizedInterval} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`;
      await ctx.reply(message, this.mainKeyboard);
    } catch (error) {
      if (
        error instanceof Error &&
        error.message === 'Subscription limit reached'
      ) {
        const user = await this.usersService.getUser(userId);
        if (!user) {
          await ctx.reply('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', this.mainKeyboard);
          return;
        }

        const message =
          '‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫!</b>\n\n' +
          `–£ –≤–∞—Å ${user.subscriptionLimit} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n` +
          '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø–ª–∞–Ω:\n\n' +
          `‚Ä¢ PRO: ${PLAN_CONFIG.pro.limit} –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ ${PLAN_CONFIG.pro.priceStars}‚≠ê\n` +
          `‚Ä¢ PREMIUM: ${PLAN_CONFIG.premium.limit} –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ ${PLAN_CONFIG.premium.priceStars}‚≠ê`;

        await ctx.reply(message, {
          parse_mode: 'HTML',
          ...this.mainKeyboard,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üõí –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω', callback_data: 'show_plans' }],
            ],
          },
        });
        return;
      }

      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏';
      await ctx.reply(
        `‚ùå ${errorMessage}\n\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: SYMBOL INTERVAL\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: SUIUSDT 15m\n\n' +
          '–ò–ª–∏ –∫–æ–º–∞–Ω–¥—É: /subscribe SYMBOL INTERVAL',
        this.mainKeyboard,
      );
    }
  }

  private async handleSubscriptionsCommand(ctx: Context): Promise<void> {
    const userId = ctx.from?.id.toString();
    if (!userId) {
      await ctx.reply('Error: Could not identify user');
      return;
    }

    try {
      const subscriptions =
        await this.subscriptionsService.getUserSubscriptions(userId);
      if (subscriptions.length === 0) {
        await ctx.reply(
          '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n' +
            '–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–æ–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: SUIUSDT 15m)',
          {
            ...this.mainKeyboard,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                    callback_data: 'refresh_subscriptions',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      const message = subscriptions
        .map((sub) => {
          const takeProfit = sub.takeProfit
            ? `\nTake Profit: ${sub.takeProfit}%`
            : '';
          return `üîî ${sub.symbol} ${sub.interval}${takeProfit}`;
        })
        .join('\n\n');

      await ctx.reply(
        '<b>üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n' +
          message +
          '\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–æ–º –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: SUIUSDT 15m)',
        {
          parse_mode: 'HTML',
          ...this.mainKeyboard,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_subscriptions' }],
              [
                {
                  text: '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ',
                  callback_data: 'clear_all_subscriptions',
                },
              ],
            ],
          },
        },
      );
    } catch (error) {
      console.error('Error fetching subscriptions:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        this.mainKeyboard,
      );
    }
  }

  private async handleRefreshSubscriptionsCallback(
    ctx: Context,
  ): Promise<void> {
    try {
      await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...');
      await this.handleSubscriptionsCommand(ctx);
    } catch (error) {
      console.error('Error handling refresh subscriptions callback:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
    }
  }

  private async handleUnsubscribeCommand(ctx: Context): Promise<void> {
    const userId = ctx.from?.id.toString();
    if (!userId) {
      await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
      return;
    }

    // Extract symbol and interval from command
    const parts = ctx.message.text.split(/\s+/);
    if (parts.length !== 3) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unsubscribe SYMBOL INTERVAL\n' +
          '–ü—Ä–∏–º–µ—Ä: /unsubscribe SUIUSDT 15m',
        this.mainKeyboard,
      );
      return;
    }

    const [, symbol, interval] = parts;

    try {
      const normalizedInterval = validateAndNormalizeInterval(interval);
      const subscription =
        await this.subscriptionsService.deactivateSubscription(
          userId,
          symbol,
          normalizedInterval,
        );

      if (!subscription) {
        await ctx.reply(
          `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${symbol} ${normalizedInterval}.\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.',
          this.mainKeyboard,
        );
        return;
      }

      await ctx.reply(
        `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol} ${normalizedInterval}`,
        this.mainKeyboard,
      );
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞';
      await ctx.reply(
        `‚ùå ${errorMessage}\n\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /unsubscribe SYMBOL INTERVAL\n' +
          '–ü—Ä–∏–º–µ—Ä: /unsubscribe SUIUSDT 15m',
        this.mainKeyboard,
      );
    }
  }

  private async handleClearAllCommand(ctx: Context): Promise<void> {
    const userId = ctx.from?.id.toString();
    if (!userId) {
      await ctx.reply(
        '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        this.mainKeyboard,
      );
      return;
    }

    try {
      await this.subscriptionsService.deactivateAllUserSubscriptions(userId);
      await ctx.reply('‚úÖ –í—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã', this.mainKeyboard);
    } catch (error) {
      console.error('Error clearing subscriptions:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        this.mainKeyboard,
      );
    }
  }

  private async handleSubscribeCommand(ctx: Context): Promise<void> {
    const userId = ctx.from?.id.toString();
    if (!userId) {
      await ctx.reply('Error: Could not identify user', this.mainKeyboard);
      return;
    }

    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('Error: Invalid command format', this.mainKeyboard);
      return;
    }

    // Extract symbol and interval from command
    const parts = ctx.message.text.split(/\s+/);
    if (parts.length !== 3) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe SYMBOL INTERVAL\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe SUIUSDT 15m',
        this.mainKeyboard,
      );
      return;
    }

    const [, symbol, interval] = parts;

    try {
      const normalizedInterval = validateAndNormalizeInterval(interval);
      await this.subscriptionsService.createOrUpdateSubscription(
        userId,
        symbol,
        normalizedInterval,
      );

      await ctx.reply(
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol} ${normalizedInterval} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`,
        this.mainKeyboard,
      );
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞';
      await ctx.reply(
        `‚ùå ${errorMessage}\n\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /subscribe SYMBOL INTERVAL\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe SUIUSDT 15m',
        this.mainKeyboard,
      );
    }
  }

  private async handleBuyCommand(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.reply(
          '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          this.mainKeyboard,
        );
        return;
      }

      let user = await this.usersService.getUser(userId);
      if (!user) {
        user = await this.usersService.createIfNotExists(userId);
      }

      const message =
        '<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' +
        `<b>Pro Plan (${PLAN_CONFIG.pro.priceStars}‚≠ê)</b>\n` +
        `‚Ä¢ –î–æ ${PLAN_CONFIG.pro.limit} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n` +
        `‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${PLAN_CONFIG.pro.durationDays} –¥–Ω–µ–π\n\n` +
        `<b>Premium Plan (${PLAN_CONFIG.premium.priceStars}‚≠ê)</b>\n` +
        `‚Ä¢ –î–æ ${PLAN_CONFIG.premium.limit} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n` +
        `‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${PLAN_CONFIG.premium.durationDays} –¥–Ω–µ–π\n\n` +
        '–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: ' +
        user.plan.toUpperCase();

      await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `Pro Plan (${PLAN_CONFIG.pro.priceStars}‚≠ê)`,
                callback_data: 'buy_pro',
              },
              {
                text: `Premium Plan (${PLAN_CONFIG.premium.priceStars}‚≠ê)`,
                callback_data: 'buy_premium',
              },
            ],
          ],
        },
      });
    } catch (error) {
      console.error('Error handling buy command:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏',
        this.mainKeyboard,
      );
    }
  }

  private async handleBuyPlanCallback(
    ctx: Context,
    plan: 'pro' | 'premium',
  ): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const config = PLAN_CONFIG[plan];

      // Show payment instructions for Stars
      await ctx.editMessageText(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${plan.toUpperCase()} Plan\n\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${config.priceStars}‚≠ê\n` +
          `–õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫: ${config.limit}\n` +
          `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${config.durationDays} –¥–Ω–µ–π\n\n` +
          '–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–û–ø–ª–∞—Ç–∏—Ç—å ${config.priceStars}‚≠ê`,
                  callback_data: `pay_${plan}`,
                },
              ],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º', callback_data: 'back_to_plans' }],
            ],
          },
        },
      );
    } catch (error) {
      console.error('Error handling buy plan callback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞');
    }
  }

  private async handlePaymentCallback(
    ctx: Context,
    plan: 'pro' | 'premium',
  ): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const config = PLAN_CONFIG[plan];

      await ctx.replyWithInvoice({
        title: `${plan.toUpperCase()} Plan`,
        description: `–î–æ—Å—Ç—É–ø –∫ ${config.limit} –ø–æ–¥–ø–∏—Å–∫–∞–º –Ω–∞ ${config.durationDays} –¥–Ω–µ–π`,
        payload: plan,
        provider_token: '',
        currency: 'XTR',
        prices: [
          {
            label: `${plan.toUpperCase()} Plan`,
            amount: config.priceStars,
          },
        ],
        start_parameter: `buy_${plan}`,
      });

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('Error handling payment callback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  private async handleSuccessfulPayment(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        throw new Error('Could not identify user');
      }

      if (!ctx.message || !('successful_payment' in ctx.message)) {
        throw new Error('Invalid payment message');
      }

      const plan = ctx.message.successful_payment.invoice_payload as
        | 'pro'
        | 'premium';

      const user = await this.usersService.updatePlan(userId, plan, {
        telegramPaymentChargeId:
          ctx.message.successful_payment.telegram_payment_charge_id,
        telegramPaymentInvoiceId:
          ctx.message.successful_payment.invoice_payload,
        currency: ctx.message.successful_payment.currency,
        amount: ctx.message.successful_payment.total_amount,
      });

      const message =
        '<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n' +
        '<b>–í–∞—à –ø–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:</b>\n' +
        `‚Ä¢ –ü–ª–∞–Ω: <b>${user.plan.toUpperCase()}</b>\n` +
        `‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫: <b>${user.subscriptionLimit}</b>\n` +
        `‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>${user.subscriptionExpiresAt?.toLocaleDateString() || '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}</b>\n\n` +
        '<b>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n' +
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫\n' +
        '‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã';

      await ctx.reply(message, {
        parse_mode: 'HTML',
        ...this.mainKeyboard,
      });

      // Show detailed status after successful payment
      await this.handleMyStatus(ctx);
    } catch (error) {
      console.error('Error handling successful payment:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        this.mainKeyboard,
      );
    }
  }

  private async handleStatusCommand(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const user = await this.usersService.getUser(userId);
      if (!user) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const subscriptions =
        await this.subscriptionsService.getUserSubscriptions(userId);
      const usedSubscriptions = subscriptions.length;
      const config = PLAN_CONFIG[user.plan];

      const message =
        '<b>üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n\n' +
        `<b>–ü–ª–∞–Ω:</b> ${user.plan.toUpperCase()}\n` +
        `<b>–õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫:</b> ${usedSubscriptions}/${config.limit}\n` +
        `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${user.subscriptionExpiresAt?.toLocaleDateString() || '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n` +
        (user.plan === 'free'
          ? '<b>üí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫?</b>\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤'
          : '');

      await ctx.reply(message, {
        parse_mode: 'HTML',
        ...this.mainKeyboard,
        reply_markup:
          user.plan === 'free'
            ? {
                inline_keyboard: [
                  [{ text: 'üõí –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω', callback_data: 'show_plans' }],
                ],
              }
            : undefined,
      });
    } catch (error) {
      console.error('Error handling status command:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        this.mainKeyboard,
      );
    }
  }

  private async handleMyStatus(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const user = await this.usersService.getUser(userId);
      if (!user) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const subscriptions =
        await this.subscriptionsService.getUserSubscriptions(userId);
      const usedSubscriptions = subscriptions.length;
      const config = PLAN_CONFIG[user.plan];

      // Get up to 5 active subscriptions
      const activeSubscriptions = subscriptions
        .slice(0, 5)
        .map((sub) => `‚Ä¢ ${sub.symbol} ${sub.interval}`)
        .join('\n');

      const message =
        '<b>üìä –í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n\n' +
        `<b>ü™™ –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</b> ${user.plan.toUpperCase()}\n` +
        `<b>üî¢ –ü–æ–¥–ø–∏—Å–∫–∏:</b> ${usedSubscriptions}/${config.limit}\n` +
        `<b>üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${user.subscriptionExpiresAt?.toLocaleDateString() || '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n` +
        (activeSubscriptions
          ? `<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n${activeSubscriptions}\n\n`
          : '') +
        '<b>üìò –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '‚Ä¢ /subscribe SYMBOL INTERVAL ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n' +
        '‚Ä¢ /unsubscribe SYMBOL INTERVAL ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n' +
        '‚Ä¢ /buy ‚Äî –∫—É–ø–∏—Ç—å PRO –∏–ª–∏ PREMIUM –ø–ª–∞–Ω\n' +
        '‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã';

      await ctx.reply(message, {
        parse_mode: 'HTML',
        ...this.mainKeyboard,
      });
    } catch (error) {
      console.error('Error handling my status:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        this.mainKeyboard,
      );
    }
  }

  async sendNotification(
    type: 'error' | 'info' | 'fix',
    message: string,
    userId: string,
  ): Promise<number> {
    let prefix = '';
    switch (type) {
      case 'error':
        prefix = 'üî¥ ';
        break;
      case 'info':
        prefix = 'üîµ ';
        break;
      case 'fix':
        prefix = 'üü¢ ';
        break;
    }

    try {
      console.log(`[TELEGRAM] ${message}`); // Log original message for debugging
      const result = await this.bot.telegram.sendMessage(
        userId,
        prefix + message,
        { parse_mode: 'HTML' },
      );
      return result.message_id;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', err);
      // If message formatting fails, try sending without formatting
      try {
        const fallbackMessage =
          prefix +
          '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.';
        const result = await this.bot.telegram.sendMessage(
          userId,
          fallbackMessage,
          { parse_mode: undefined },
        );
        return result.message_id;
      } catch (fallbackErr) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è:', fallbackErr);
        return 0;
      }
    }
  }

  async sendReplyNotification(
    type: 'error' | 'info' | 'fix',
    message: string,
    replyToMessageId: number,
    userId: string,
  ): Promise<number> {
    let prefix = '';
    switch (type) {
      case 'error':
        prefix = 'üî¥ ';
        break;
      case 'info':
        prefix = 'üîµ ';
        break;
      case 'fix':
        prefix = 'üü¢ ';
        break;
    }

    try {
      console.log(`[TELEGRAM] Reply to ${replyToMessageId}: ${message}`); // Log original message
      const result = await this.bot.telegram.sendMessage(
        userId,
        prefix + message,
        {
          reply_to_message_id: replyToMessageId,
          allow_sending_without_reply: true,
          parse_mode: 'HTML',
        } as any,
      );
      return result.message_id;
    } catch (err) {
      console.error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${replyToMessageId}:`,
        err,
      );
      // Fallback to regular message if reply fails
      return this.sendNotification(type, message, userId);
    }
  }

  async sendErrorNotification({
    error,
    context,
    userId,
  }: {
    error: unknown;
    context?: string;
    userId: string;
  }): Promise<number> {
    const errorMessage = formatErrorForHtml(error);
    const message = context
      ? `<b>${context}</b>\n${errorMessage}`
      : errorMessage;
    return this.sendNotification('error', message, userId);
  }

  async sendInfoNotification(
    title: string,
    content: string,
    userId: string,
  ): Promise<number> {
    const message = `<b>${title}</b>\n\n${content}`;
    const response = await this.bot.telegram.sendMessage(userId, message, {
      parse_mode: 'HTML',
    });
    return response.message_id;
  }

  async sendDirectMessage(userId: string, message: string): Promise<number> {
    try {
      const result = await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'HTML',
      });
      return result.message_id;
    } catch (error) {
      console.error(`Failed to send direct message to ${userId}:`, error);
      throw error;
    }
  }

  async deleteMessage(messageId: number, userId: string): Promise<void> {
    try {
      await this.bot.telegram.deleteMessage(userId, messageId);
    } catch (error) {
      console.error(
        `Failed to delete message ${messageId} for user ${userId}:`,
        error,
      );
      // Don't throw error to prevent blocking the signal update process
    }
  }
}
